plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.70'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.jmailen.kotlinter' version '1.18.0'
    id 'nu.studer.jooq' version '3.0.2'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

defaultTasks 'run'

mainClassName = 'com.softwareberg.BootKt'
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task fatJar(type: Jar) {
    baseName = "${project.name}-assembly"
    manifest = jar.manifest
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets {
    integrationTest {
        kotlin {
            srcDirs += 'src/it/kotlin'
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources.srcDirs += 'src/it/resources'
    }
    main.java.srcDirs += 'src/main/generated'
}

task integrationTest(group: 'verification', type: Test, description: 'Runs integration tests.') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task stage(dependsOn: ['fatJar', 'build', 'clean'])
build.mustRunAfter clean
fatJar.mustRunAfter build
stage.dependsOn(fatJar)

jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    reports {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }
    dependsOn test
}

task ktLint(type: org.jmailen.gradle.kotlinter.tasks.LintTask, group: 'verification', description: 'Kotlin lint') {
    source = file('src')
    continuationIndentSize = 4
    reports = [:]
}

kotlinter {
    continuationIndentSize = 4
}

test {
    useJUnitPlatform()
}

check {
    dependsOn = check.dependsOn + [ktLint, integrationTest]
}

jooq {
    softwareberg(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/softwareberg'
            user = 'softwareberg'
            password = 'softwareberg'
        }
        generator {
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'JSONB?'
                    }
                    forcedType {
                        name = 'varchar'
                        expression = '.*'
                        types = 'INET'
                    }
                }
                properties{
                    excludes = 'flyway_schema_history'
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                validationAnnotations = true
            }
            target {
                packageName = 'com.softwareberg.database'
                directory = 'src/generated/java'
            }
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'http://dl.bintray.com/kotlin/kotlinx.coroutines' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    ext.kotlinxcoroutines = '0.26.1'
    ext.rinca = '0.10.1'

    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.70'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.2.70'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile 'com.sparkjava:spark-core:2.8.0'
    compile 'org.kodein.di:kodein-di-generic-jvm:5.2.0'
    compile 'com.typesafe:config:1.3.3'
    compile 'com.github.kittinunf.result:result:1.5.0'

    compile 'com.zaxxer:HikariCP:3.2.0'
    compile 'org.flywaydb:flyway-core:5.1.4'
    compile 'org.postgresql:postgresql:42.2.5'
    jooqRuntime 'org.postgresql:postgresql:42.2.5'
    compile 'org.jooq:jooq:3.11.5'
    compile 'org.jooq:jooq-meta:3.11.5'
    compile 'org.jooq:jooq-codegen:3.11.5'
    compile 'javax.validation:validation-api:2.0.1.Final'

    compile 'org.jsoup:jsoup:1.11.3'
    compile 'org.quartz-scheduler:quartz:2.3.0'

    compile "com.github.softwareberg.rinca:database:$rinca"
    compile "com.github.softwareberg.rinca:httpclient:$rinca"
    compile "com.github.softwareberg.rinca:json:$rinca"
    compile "com.github.softwareberg.rinca:xml:$rinca"

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxcoroutines"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxcoroutines"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlinxcoroutines"

    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile 'com.nhaarman:mockito-kotlin:1.6.0'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
    testCompile 'org.assertj:assertj-core:3.11.1'

    integrationTestCompile 'com.despegar:spark-test:1.1.8'
    integrationTestCompile 'com.jayway.jsonpath:json-path:2.3.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}
