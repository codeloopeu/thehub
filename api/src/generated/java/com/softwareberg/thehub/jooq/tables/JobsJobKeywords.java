/*
 * This file is generated by jOOQ.
 */
package com.softwareberg.thehub.jooq.tables;


import com.softwareberg.thehub.jooq.Indexes;
import com.softwareberg.thehub.jooq.Keys;
import com.softwareberg.thehub.jooq.Public;
import com.softwareberg.thehub.jooq.tables.records.JobsJobKeywordsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobsJobKeywords extends TableImpl<JobsJobKeywordsRecord> {

    private static final long serialVersionUID = 339449252;

    /**
     * The reference instance of <code>public.jobs_job_keywords</code>
     */
    public static final JobsJobKeywords JOBS_JOB_KEYWORDS = new JobsJobKeywords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobsJobKeywordsRecord> getRecordType() {
        return JobsJobKeywordsRecord.class;
    }

    /**
     * The column <code>public.jobs_job_keywords.keyword</code>.
     */
    public final TableField<JobsJobKeywordsRecord, String> KEYWORD = createField("keyword", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs_job_keywords.job_id</code>.
     */
    public final TableField<JobsJobKeywordsRecord, String> JOB_ID = createField("job_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs_job_keywords.date_created</code>.
     */
    public final TableField<JobsJobKeywordsRecord, OffsetDateTime> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.jobs_job_keywords.date_modified</code>.
     */
    public final TableField<JobsJobKeywordsRecord, OffsetDateTime> DATE_MODIFIED = createField("date_modified", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.jobs_job_keywords</code> table reference
     */
    public JobsJobKeywords() {
        this(DSL.name("jobs_job_keywords"), null);
    }

    /**
     * Create an aliased <code>public.jobs_job_keywords</code> table reference
     */
    public JobsJobKeywords(String alias) {
        this(DSL.name(alias), JOBS_JOB_KEYWORDS);
    }

    /**
     * Create an aliased <code>public.jobs_job_keywords</code> table reference
     */
    public JobsJobKeywords(Name alias) {
        this(alias, JOBS_JOB_KEYWORDS);
    }

    private JobsJobKeywords(Name alias, Table<JobsJobKeywordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobsJobKeywords(Name alias, Table<JobsJobKeywordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JobsJobKeywords(Table<O> child, ForeignKey<O, JobsJobKeywordsRecord> key) {
        super(child, key, JOBS_JOB_KEYWORDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOBS_JOB_KEYWORDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobsJobKeywordsRecord> getPrimaryKey() {
        return Keys.JOBS_JOB_KEYWORDS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobsJobKeywordsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobsJobKeywordsRecord>>asList(Keys.JOBS_JOB_KEYWORDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JobsJobKeywordsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobsJobKeywordsRecord, ?>>asList(Keys.JOBS_JOB_KEYWORDS__JOBS_JOB_KEYWORDS_KEYWORD_FKEY, Keys.JOBS_JOB_KEYWORDS__JOBS_JOB_KEYWORDS_JOB_ID_FKEY);
    }

    public JobKeywords jobKeywords() {
        return new JobKeywords(this, Keys.JOBS_JOB_KEYWORDS__JOBS_JOB_KEYWORDS_KEYWORD_FKEY);
    }

    public Jobs jobs() {
        return new Jobs(this, Keys.JOBS_JOB_KEYWORDS__JOBS_JOB_KEYWORDS_JOB_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobsJobKeywords as(String alias) {
        return new JobsJobKeywords(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JobsJobKeywords as(Name alias) {
        return new JobsJobKeywords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobsJobKeywords rename(String name) {
        return new JobsJobKeywords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobsJobKeywords rename(Name name) {
        return new JobsJobKeywords(name, null);
    }
}
