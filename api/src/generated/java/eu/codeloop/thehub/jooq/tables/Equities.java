/*
 * This file is generated by jOOQ.
 */
package eu.codeloop.thehub.jooq.tables;


import eu.codeloop.thehub.jooq.Indexes;
import eu.codeloop.thehub.jooq.Keys;
import eu.codeloop.thehub.jooq.Public;
import eu.codeloop.thehub.jooq.tables.records.EquitiesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Equities extends TableImpl<EquitiesRecord> {

    private static final long serialVersionUID = -986239906;

    /**
     * The reference instance of <code>public.equities</code>
     */
    public static final Equities EQUITIES = new Equities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EquitiesRecord> getRecordType() {
        return EquitiesRecord.class;
    }

    /**
     * The column <code>public.equities.equity</code>.
     */
    public final TableField<EquitiesRecord, String> EQUITY = createField("equity", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.equities.date_created</code>.
     */
    public final TableField<EquitiesRecord, OffsetDateTime> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.equities.date_modified</code>.
     */
    public final TableField<EquitiesRecord, OffsetDateTime> DATE_MODIFIED = createField("date_modified", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.equities</code> table reference
     */
    public Equities() {
        this(DSL.name("equities"), null);
    }

    /**
     * Create an aliased <code>public.equities</code> table reference
     */
    public Equities(String alias) {
        this(DSL.name(alias), EQUITIES);
    }

    /**
     * Create an aliased <code>public.equities</code> table reference
     */
    public Equities(Name alias) {
        this(alias, EQUITIES);
    }

    private Equities(Name alias, Table<EquitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Equities(Name alias, Table<EquitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Equities(Table<O> child, ForeignKey<O, EquitiesRecord> key) {
        super(child, key, EQUITIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EQUITIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EquitiesRecord> getPrimaryKey() {
        return Keys.EQUITIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EquitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<EquitiesRecord>>asList(Keys.EQUITIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Equities as(String alias) {
        return new Equities(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Equities as(Name alias) {
        return new Equities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Equities rename(String name) {
        return new Equities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Equities rename(Name name) {
        return new Equities(name, null);
    }
}
