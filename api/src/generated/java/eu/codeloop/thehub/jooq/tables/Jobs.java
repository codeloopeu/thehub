/*
 * This file is generated by jOOQ.
 */
package eu.codeloop.thehub.jooq.tables;


import eu.codeloop.thehub.jooq.Indexes;
import eu.codeloop.thehub.jooq.Keys;
import eu.codeloop.thehub.jooq.Public;
import eu.codeloop.thehub.jooq.tables.records.JobsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jobs extends TableImpl<JobsRecord> {

    private static final long serialVersionUID = -323945008;

    /**
     * The reference instance of <code>public.jobs</code>
     */
    public static final Jobs JOBS = new Jobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobsRecord> getRecordType() {
        return JobsRecord.class;
    }

    /**
     * The column <code>public.jobs.job_id</code>.
     */
    public final TableField<JobsRecord, String> JOB_ID = createField("job_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs.company_id</code>.
     */
    public final TableField<JobsRecord, String> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs.title</code>.
     */
    public final TableField<JobsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs.monthly_salary</code>.
     */
    public final TableField<JobsRecord, String> MONTHLY_SALARY = createField("monthly_salary", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.jobs.equity</code>.
     */
    public final TableField<JobsRecord, String> EQUITY = createField("equity", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.jobs.description</code>.
     */
    public final TableField<JobsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.jobs.position_type</code>.
     */
    public final TableField<JobsRecord, String> POSITION_TYPE = createField("position_type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.jobs.date_created</code>.
     */
    public final TableField<JobsRecord, OffsetDateTime> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.jobs.date_modified</code>.
     */
    public final TableField<JobsRecord, OffsetDateTime> DATE_MODIFIED = createField("date_modified", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.jobs.has_star</code>.
     */
    public final TableField<JobsRecord, Boolean> HAS_STAR = createField("has_star", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.jobs.is_deleted</code>.
     */
    public final TableField<JobsRecord, Boolean> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.jobs.poster</code>.
     */
    public final TableField<JobsRecord, String> POSTER = createField("poster", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.jobs</code> table reference
     */
    public Jobs() {
        this(DSL.name("jobs"), null);
    }

    /**
     * Create an aliased <code>public.jobs</code> table reference
     */
    public Jobs(String alias) {
        this(DSL.name(alias), JOBS);
    }

    /**
     * Create an aliased <code>public.jobs</code> table reference
     */
    public Jobs(Name alias) {
        this(alias, JOBS);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Jobs(Table<O> child, ForeignKey<O, JobsRecord> key) {
        super(child, key, JOBS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOBS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobsRecord> getPrimaryKey() {
        return Keys.JOBS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobsRecord>>asList(Keys.JOBS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JobsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobsRecord, ?>>asList(Keys.JOBS__JOBS_COMPANY_ID_FKEY, Keys.JOBS__JOBS_MONTHLY_SALARY_FKEY, Keys.JOBS__JOBS_EQUITY_FKEY, Keys.JOBS__JOBS_POSITION_TYPE_FKEY);
    }

    public Companies companies() {
        return new Companies(this, Keys.JOBS__JOBS_COMPANY_ID_FKEY);
    }

    public MonthlySalaries monthlySalaries() {
        return new MonthlySalaries(this, Keys.JOBS__JOBS_MONTHLY_SALARY_FKEY);
    }

    public Equities equities() {
        return new Equities(this, Keys.JOBS__JOBS_EQUITY_FKEY);
    }

    public PositionsTypes positionsTypes() {
        return new PositionsTypes(this, Keys.JOBS__JOBS_POSITION_TYPE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Jobs as(String alias) {
        return new Jobs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Jobs as(Name alias) {
        return new Jobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(String name) {
        return new Jobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(Name name) {
        return new Jobs(name, null);
    }
}
